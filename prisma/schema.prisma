generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Category {
  id          String    @id @default(cuid())
  name        String    @unique
  slug        String    @unique
  description String?
  isActive    Boolean   @default(true)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  products    Product[]

  @@map("categories")
}

model Product {
  id              String           @id @default(cuid())
  title           String
  slug            String           @unique
  description     String?
  originalPrice   Decimal?         @db.Decimal(10, 2)
  salePrice       Decimal          @db.Decimal(10, 2)
  status          ProductStatus    @default(AVAILABLE)
  image           String?
  sku             String?          @unique
  stock           Int              @default(0)
  isActive        Boolean          @default(true)
  isFeatured      Boolean          @default(false)
  categoryId      String
  metaTitle       String?
  metaDescription String?
  tags            String[]         @default([])
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  showStockCount  Boolean          @default(false)
  images          ProductImage[]
  variants        ProductVariant[]
  category        Category         @relation(fields: [categoryId], references: [id])

  @@map("products")
}

model Announcement {
  id              String             @id @default(cuid())
  title           String
  message         String
  type            AnnouncementType   @default(GENERAL)
  status          AnnouncementStatus @default(ACTIVE)
  priority        Int                @default(1)
  backgroundColor String?
  textColor       String?
  iconName        String?
  isScrolling     Boolean            @default(false)
  showCloseButton Boolean            @default(true)
  autoHide        Boolean            @default(false)
  autoHideDelay   Int?
  startDate       DateTime?
  endDate         DateTime?
  linkUrl         String?
  linkText        String?
  createdAt       DateTime           @default(now())
  updatedAt       DateTime           @updatedAt
  isVisible       Boolean            @default(true)

  @@map("announcements")
}

model ProductImage {
  id        String   @id @default(cuid())
  url       String
  altText   String?
  sequence  Int      @default(0)
  isActive  Boolean  @default(true)
  productId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@index([productId])
  @@map("product_images")
}

model ProductVariant {
  id        String   @id @default(cuid())
  name      String
  value     String
  price     Decimal  @db.Decimal(10, 2)
  stock     Int      @default(0)
  sku       String?  @unique
  productId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@map("product_variants")
}

model SiteSetting {
  id          String   @id @default(cuid())
  key         String   @unique
  value       String
  description String?
  category    String?
  type        String   @default("text")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("site_settings")
}

model BlogPost {
  id              String    @id @default(cuid())
  title           String
  slug            String    @unique
  content         String
  excerpt         String?
  featuredImage   String?
  isPublished     Boolean   @default(false)
  publishedAt     DateTime?
  metaTitle       String?
  metaDescription String?
  tags            String[]  @default([])
  authorName      String?
  authorEmail     String?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  @@map("blog_posts")
}

model ContactSubmission {
  id        String   @id @default(cuid())
  name      String
  email     String
  phone     String?
  subject   String?
  message   String
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("contact_submissions")
}

model HeroCarousel {
  id        String    @id @default(cuid())
  name      String?
  imageUrl  String
  sequence  Int       @default(0)
  isActive  Boolean   @default(true)
  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt

  @@map("hero_carousel")
}

enum ProductStatus {
  AVAILABLE
  SOLD_OUT
  DISCONTINUED
  COMING_SOON
}

enum AnnouncementType {
  GENERAL
  SALE
  NEW_PRODUCT
  MAINTENANCE
  URGENT
}

enum AnnouncementStatus {
  ACTIVE
  INACTIVE
  SCHEDULED
}
